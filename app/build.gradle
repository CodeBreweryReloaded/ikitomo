/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4/userguide/building_java_projects.html
 */

plugins {
    id 'java'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    // sonarqube plugin for uploading code to sonarqube instance
    id "org.sonarqube" version "3.3"

    // jacoco plugin for test generting teest covarage
    id 'jacoco'

    // shdadow plugin - useful to create fat jars
    id 'com.github.johnrengelman.shadow' version '7.1.2'

    // apply ide plugins to generate project files
    id 'eclipse'
    id 'idea'

    // Support for JavaFX
    id 'org.openjfx.javafxplugin' version '0.0.12'
}

group = 'ch.zhaw.codebrewery'
version = '0.1'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    // mockito for unit testing
    testImplementation 'org.mockito:mockito-core:4.5.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.5.1'



    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    implementation 'com.fasterxml.jackson.core:jackson-core:2.8.8'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.8.8'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.8.8'
}

application {
    // Define the main class for the application.
    mainClass = 'ch.zhaw.ikitomo.IkitomoMain'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    compileJava {
        options.encoding = 'UTF-8'
    }
}

javafx {
    version = '17.0.2'
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing' ]
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
        xml.outputLocation = layout.buildDirectory.file("jacoco.xml")
    }
}

sonarqube {
    properties{
        property 'sonar.projectKey', "${group}:${rootProject.name}"
        property "sonar.projectName", "${rootProject.name}" 
    }
}